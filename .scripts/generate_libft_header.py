#!/usr/local/bin/python3

from core import *

N_TABS = 2
tabs = '\t' * N_TABS

def get_formatted_signature(function_name):
	try:
		include, return_type, deref_operators, arguments = parse_manpage(function_name)
	except:
		import ipdb; ipdb.set_trace()	
	formatted_arguments = [f'{t} {deref}{ident}' for (t, deref, ident) in arguments]
	return f"{return_type}{tabs}{deref_operators}ft_{function_name}({', '.join(formatted_arguments)});"

if __name__ == '__main__':
	function_signatures = '\n'.join([get_formatted_signature(fn) for fn in sorted(FUNCTION_NAMES)])
	template = \
f"""{poison}

/*
* This file is autogenerated.
* Edit the template in .scripts/generate_libft_header.py
*/

#include <string.h>

#ifndef LIBFT_H
# define LIBFT_H

#define IS_LOWERCASE(X) ((X >= 'a') && (X <= 'z'))
#define IS_UPPERCASE(X) ((X >= 'A') && (X <= 'Z'))
#define IS_ALPHA(X) (IS_LOWERCASE(X) || IS_UPPERCASE(X))
#define IS_DIGIT(X) ((X >= '0') && (X <= '9'))

int{tabs}ft_atoi_ptr(char *str, long *out);
void{tabs}ft_putchar(char c);
void{tabs}ft_puts(char *str);

{function_signatures}

#endif
"""
	with open(os.path.join(LIB_DIR, 'libft.h'), 'w') as fd:
		fd.write(template)
